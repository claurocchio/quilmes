// ---------------------------------------------------------------------------
// This file has been generated by the Web Dynpro Code Generator.
// DO NOT MODIFY! CHANGES WILL BE LOST IF THE FILE IS REGENERATED.
// ---------------------------------------------------------------------------
package com.quilmes.baja.wdp;

import com.sap.tc.webdynpro.progmodel.api.*;
import com.sap.tc.webdynpro.progmodel.gci.*;
import com.sap.tc.webdynpro.progmodel.context.*;
import com.sap.tc.webdynpro.services.exceptions.WDRuntimeException;

/** Interface that is provided to application class. */

public interface IPrivatePopup {

  /*
   * Event Handler identifiers.
   */ 
    
  /** Event handler constant. */
  public static IWDEventHandlerId WD_EVENTHANDLER_ON_ACTIONACEPTAR = new com.sap.tc.webdynpro.progmodel.gci.impl.GCIEventHandlerId("onActionaceptar", "Popup", "com.quilmes.baja.BajaUS");
  
  /** Event handler constant. */
  public static IWDEventHandlerId WD_EVENTHANDLER_ON_ACTIONCANCELAR = new com.sap.tc.webdynpro.progmodel.gci.impl.GCIEventHandlerId("onActioncancelar", "Popup", "com.quilmes.baja.BajaUS");
  
  /**
   * Provides access to the generic API of this controller.
   */
  IWDViewController wdGetAPI();


  /**
   * Interface for the node 'Context'.
   *
   * singleton = true, cardinality = _1_1, selection = _1_1
   */
  public static class IContextNode extends Node
  {
    private InternalPopup gen_delegate;

    IContextNode(InternalPopup delegate, IGCINodeInfo nodeInfo, Node parent) {
      super(nodeInfo, parent);
      gen_delegate = delegate;
    }

    protected com.sap.tc.webdynpro.progmodel.context.Node createNode(IGCINodeInfo nodeInfo, com.sap.tc.webdynpro.progmodel.context.Node parentNode, com.sap.tc.webdynpro.progmodel.context.NodeElement parentElement) {
      if (nodeInfo == gen_delegate.infoContext)
        return new IPrivatePopup.IContextNode(gen_delegate, nodeInfo, parentNode);
      return super.createNode(nodeInfo, parentNode, parentElement);
    }

    protected com.sap.tc.webdynpro.progmodel.context.NodeElement doCreateElement(IGCINodeInfo nodeInfo, Object reference) {
      if (nodeInfo == gen_delegate.infoContext) {
        return new IPrivatePopup.IContextElement(gen_delegate, nodeInfo);
      }
      return super.doCreateElement(nodeInfo, reference);
    }

    // ---- typed accessors --------------------------------------------------

    /**
     * Provides access to the generic context API as described by IWDContext.
     */
    public IWDContext wdGetAPI() {
      return getContext();
    }

    /**
     * Creates a new element for this node. The element is <b>not</b> bound 
     * to the node. Use {@link #bind(IContextElement)} or 
     * {@link IWDNode#bind(Collection)} to bind it or {@link IWDNode#addElement(IWDNodeElement)}
     * to add it to the node.
     * @return an element for this node
     */
    public IPrivatePopup.IContextElement createContextElement() {
      return (IPrivatePopup.IContextElement)createElement();
    }

    /**
     * Binds a single IContextElement to the node.
     * @param element a node element for this node
     */
    public void bind(IPrivatePopup.IContextElement element) {
      bind(element == null ? java.util.Collections.EMPTY_LIST : java.util.Collections.singletonList(element));
    }

    /** 
     * Returns the element at the lead selection.
     * @return the element at the lead selection or <code>null</code> if the
     *         lead selection is not set
     */
    public IPrivatePopup.IContextElement currentContextElement() {
      return (IPrivatePopup.IContextElement) getCurrentElement();
    }

    // ---- hooks ------------------------------------------------------------

    // ---- child nodes ------------------------------------------------------------

  }

  /**
   * Interface for the elements of the node Context.
   */
  public static class IContextElement extends com.sap.tc.webdynpro.progmodel.context.NodeElement
  {
    private InternalPopup gen_delegate;

    public IContextElement(InternalPopup delegate, com.sap.tc.webdynpro.progmodel.gci.IGCINodeInfo info) {
      super(info);
      gen_delegate = delegate;
    }

    // attribute "observac"
    public final static String OBSERVAC = "observac";

    private MappedAttribute _observac;

    /**
     * Returns the attribute observac.
     */
    public java.lang.String getObservac() {
      if (_observac == null)
        _observac = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("observac"), this);
      return _observac.getString();
    }

    /**
     * Sets the attribute observac.
     * @param value the new value
     */
    public void setObservac(java.lang.String value) {
      if (this._observac == null)
        this._observac = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("observac"), this);
      this._observac.setString(value);
    }
    
    // attribute "atributo"
    public final static String ATRIBUTO = "atributo";

    private MappedAttribute _atributo;

    /**
     * Returns the attribute atributo.
     */
    public com.sap.tc.webdynpro.services.session.api.IWDWindow getAtributo() {
      if (_atributo == null)
        _atributo = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("atributo"), this);
      return (com.sap.tc.webdynpro.services.session.api.IWDWindow)_atributo.getObject();
    }

    /**
     * Sets the attribute atributo.
     * @param value the new value
     */
    public void setAtributo(com.sap.tc.webdynpro.services.session.api.IWDWindow value) {
      if (this._atributo == null)
        this._atributo = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("atributo"), this);
      this._atributo.setObject(value);
    }
    
    // attribute "resultado"
    public final static String RESULTADO = "resultado";

    private MappedAttribute _resultado;

    /**
     * Returns the attribute resultado.
     */
    public java.lang.String getResultado() {
      if (_resultado == null)
        _resultado = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("resultado"), this);
      return _resultado.getString();
    }

    /**
     * Sets the attribute resultado.
     * @param value the new value
     */
    public void setResultado(java.lang.String value) {
      if (this._resultado == null)
        this._resultado = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("resultado"), this);
      this._resultado.setString(value);
    }
    
    // attribute "eleccion"
    public final static String ELECCION = "eleccion";

    private MappedAttribute _eleccion;

    /**
     * Returns the attribute eleccion.
     */
    public java.lang.String getEleccion() {
      if (_eleccion == null)
        _eleccion = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("eleccion"), this);
      return _eleccion.getString();
    }

    /**
     * Sets the attribute eleccion.
     * @param value the new value
     */
    public void setEleccion(java.lang.String value) {
      if (this._eleccion == null)
        this._eleccion = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("eleccion"), this);
      this._eleccion.setString(value);
    }
    
    // generic access to fields (framework usage)
    protected Object wdGetObject(IGCIAttributeInfo info) {
      switch (info.getIndex()) {
        case 0: // observac
          if (this._observac == null)
            this._observac = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("observac"), this);
          return _observac.getObject();
        case 1: // atributo
          if (this._atributo == null)
            this._atributo = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("atributo"), this);
          return _atributo.getObject();
        case 2: // resultado
          if (this._resultado == null)
            this._resultado = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("resultado"), this);
          return _resultado.getObject();
        case 3: // eleccion
          if (this._eleccion == null)
            this._eleccion = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("eleccion"), this);
          return _eleccion.getObject();
        default:
          return super.wdGetObject(info);
      }
    }

    protected void wdSetObject(IGCIAttributeInfo info, Object value) {
      switch (info.getIndex()) {
        case 0: // observac
          if (this._observac == null)
            this._observac = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("observac"), this);
          this._observac.setObject(value);
          break;
        case 1: // atributo
          if (this._atributo == null)
            this._atributo = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("atributo"), this);
          this._atributo.setObject(value);
          break;
        case 2: // resultado
          if (this._resultado == null)
            this._resultado = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("resultado"), this);
          this._resultado.setObject(value);
          break;
        case 3: // eleccion
          if (this._eleccion == null)
            this._eleccion = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("eleccion"), this);
          this._eleccion.setObject(value);
          break;
        default:
          super.wdSetObject(info, value);
          break;
      }
    }

    protected String wdGetString(IGCIAttributeInfo info) {
      switch (info.getIndex()) {
        case 0: // observac
          if (this._observac == null)
            this._observac = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("observac"), this);
          return _observac.getString();
        case 2: // resultado
          if (this._resultado == null)
            this._resultado = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("resultado"), this);
          return _resultado.getString();
        case 3: // eleccion
          if (this._eleccion == null)
            this._eleccion = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("eleccion"), this);
          return _eleccion.getString();
        default:
          return super.wdGetString(info);
      }
    }

    protected void wdSetString(IGCIAttributeInfo info, String value) {
      switch (info.getIndex()) {
        case 0: // observac
          if (this._observac == null)
            this._observac = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("observac"), this);
          this._observac.setString(value);
          break;
        case 2: // resultado
          if (this._resultado == null)
            this._resultado = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("resultado"), this);
          this._resultado.setString(value);
          break;
        case 3: // eleccion
          if (this._eleccion == null)
            this._eleccion = new MappedAttribute(wdGetNodeInfoGCI().getAttributeGCI("eleccion"), this);
          this._eleccion.setString(value);
          break;
        default:
          super.wdSetString(info, value);
          break;
      }
    }

  }

  /**
   * Returns the context root node.
   * @return the context root node.
   */
  IContextNode wdGetContext();

  /** Declared event handler. */
  void onActionaceptar(IWDCustomEvent wdEvent );

  /** Declared event handler. */
  void onActioncancelar(IWDCustomEvent wdEvent );

  /** Gets controller belonging to the same component. */
  com.quilmes.baja.wdp.IPublicBajaUS wdGetBajaUSController();

  /** Gets action 'aceptar'. */
  IWDAction wdGetAceptarAction();

  /** Gets action 'cancelar'. */
  IWDAction wdGetCancelarAction();

  /** Enumeration of all available action event handlers. */
  public final class WDActionEventHandler extends com.sap.tc.webdynpro.progmodel.gci.GCIActionEventHandlerEnum
  {
    public static final WDActionEventHandler ACEPTAR = new WDActionEventHandler("onActionaceptar", true, NO_PARAMETERS);
    public static final WDActionEventHandler CANCELAR = new WDActionEventHandler("onActioncancelar", true, NO_PARAMETERS);

    private WDActionEventHandler(String value, boolean isValidating, Object[] declaredParameters) {
      super(value, isValidating, declaredParameters);
    }
  }

  /**
   * Creates a new action for this controller.
   * @param eventHandler is the action's event handler with an appropriate signature
   * @param text is the text displayed in the UI element triggering this action
   */
  IWDAction wdCreateAction(WDActionEventHandler eventHandler, String text);

  /**
   * Creates a new action with the given name for this controller.
   * @param eventHandler is the action's event handler with an appropriate signature
   * @param name is the action's name
   * @param text is the text displayed in the UI element triggering this action
   */
  IWDAction wdCreateNamedAction(WDActionEventHandler eventHandler, String name, String text);

}
